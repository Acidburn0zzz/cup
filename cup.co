@print = (msg, tag) ->
  return if msg is void
  if print.last is print.last = msg
    ctrl.setAttribute \data-x, -~ctrl.getAttribute \data-x
  else
    ctrl.setAttribute \data-x 1
    lmn = document.createElement tag || \span
    lmn.appendChild document.createTextNode msg + \\n
    pout.insertBefore lmn, pout.firstChild
  void
@say   = -> print @@ * ''
@puts  = -> print @@ * \\n
@warn  = -> print "#{it}" \em
@p     = -> print (pp x for x of @@) * \\n
@pp    = uneval ? -> JSON.stringify it, null 1
@clear = -> pout.innerHTML = ''

Coco.eval = -> Function(\return + @compile it, {+repl})call self

$ = document~getElementById
code = $ \code
ctrl = $ \ctrl
pout = $ \pout
btns = {}
poem = '''
  "Coco #{Coco.VERSION}"
  \n\n\n\n
  # Not to abandon the evil parts
  # But to embrace the good parts
'''
kick = ->
  code.focus()
  {value} = code
  location.hash = @id.charAt() + \: + encode value unless value is poem
  try r = Coco[@id] value, {+bare}
  catch return warn e
  switch @accessKey
  case \a then r.=lines.join('')slice 1
  case \e then self._ = r
  case <[ t l ]>
    lines = []
    for [tag, val, lno] of r
      lines@[lno]push if tag.toLowerCase() is val then tag else "#{tag}:#{val}"
    for l, i of lines
      lines[i] = l?join(' ')replace /\n/g \\\n or ''
    r = lines.join \\n
  print r
encode = -> encodeURI(it)replace /[()]/g -> escape it

for Key of <[ Lex Tokens AST Compile Eval ]>
  btn = document.createElement \button
  btn.id = key = Key.toLowerCase()
  btn.onclick = kick
  btn.innerHTML = Key
  btns[key] = btns[btn.accessKey = key.charAt 0] = ctrl.appendChild btn

{e: eva1, c: cmpl, a: btns.n} = btns

b.innerHTML += " <small><kbd>\\#{k}-RET" for k, b in C: eva1, S: cmpl
document.onkeydown = (ev || event) ->
  return if ev.keyCode != 13 || ev.altKey || ev.metaKey
  if ev.ctrlKey && eva1 || ev.shiftKey && cmpl
    that.click()
    false

@onfocus = -> code.focus()

code.value = if cf = location.hash.slice 1
  try cf = decodeURIComponent cf
  {$1: op, rightContext: cf} = RegExp if /^([a-v]+):/test cf
  cf
else
  poem
(if op then btns[op.toLowerCase()] else eva1)click()
